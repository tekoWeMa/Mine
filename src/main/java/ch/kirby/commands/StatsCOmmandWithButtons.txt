package ch.kirby.commands;

import ch.kirby.SQL.DBConnection;
import ch.kirby.model.GameStats;
import ch.kirby.service.StatsService;
import ch.kirby.core.command.Command;
import discord4j.core.event.domain.interaction.ChatInputInteractionEvent;
import discord4j.core.event.domain.interaction.ButtonInteractionEvent;
import discord4j.core.object.entity.User;
import discord4j.core.object.component.ActionRow;
import discord4j.core.object.component.Button;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.core.spec.InteractionFollowupCreateSpec;
import reactor.core.publisher.Mono;
import reactor.core.scheduler.Schedulers;

import java.sql.Connection;
import java.util.List;
import java.util.Map;

public class StatsCommand implements Command {

    @Override
    public String getName() {
        return "stats";
    }

    private static String formatBreakdown(Map<String, Integer> breakdown) {
        StringBuilder sb = new StringBuilder();
        for (Map.Entry<String, Integer> entry : breakdown.entrySet()) {
            sb.append("â€¢ ").append(entry.getKey()).append(": ").append(entry.getValue()).append("h\n");
        }
        return sb.toString();
    }

    @Override
    public Mono<Void> handle(ChatInputInteractionEvent event) {
        return event.deferReply()
                .then(Mono.fromCallable(() -> {
                    try (Connection conn = new DBConnection().SQLDBConnection()) {
                        User commandUser = event.getInteraction().getUser();
                        User targetUser = event.getOption("user")
                                .flatMap(opt -> opt.getValue().map(v -> v.asUser().block()))
                                .orElse(null);

                        int dayspan = event.getOption("dayspan")
                                .flatMap(opt -> opt.getValue())
                                .map(v -> Integer.parseInt(v.getRaw()))
                                .orElse(7);

                        StatsService service = new StatsService(conn);
                        GameStats stats = service.getStats(commandUser, targetUser, dayspan);

                        EmbedCreateSpec embed = EmbedCreateSpec.builder()
                                .title("\uD83D\uDCCA Stats for " + stats.getUsername())
                                .description("Total playtime over the last " + dayspan + " days.")
                                .addField("Total Hours", stats.getTotalHours() + "h", false)
                                .addField("Breakdown", formatBreakdown(stats.getGameBreakdown()), false)
                                .build();

                        List<Button> buttons = List.of(
                                Button.primary("stats_7d", "7d"),
                                Button.secondary("stats_14d", "14d"),
                                Button.secondary("stats_30d", "30d")
                        );

                        return InteractionFollowupCreateSpec.builder()
                                .addEmbed(embed)
                                .addComponent(ActionRow.of(buttons))
                                .build();

                    } catch (Exception e) {
                        return InteractionFollowupCreateSpec.builder()
                                .content("\u26A0\uFE0F Error: " + e.getMessage())
                                .build();
                    }
                }).subscribeOn(Schedulers.boundedElastic()))
                .flatMap(event::createFollowup)
                .then();
    }

    public static Mono<Void> handleButton(ButtonInteractionEvent event) {
        String customId = event.getCustomId();
        int dayspan = switch (customId) {
            case "stats_14d" -> 14;
            case "stats_30d" -> 30;
            default -> 7;
        };

        return event.deferEdit()
                .then(Mono.fromCallable(() -> {
                    try (Connection conn = new DBConnection().SQLDBConnection()) {
                        User user = event.getInteraction().getUser();
                        StatsService service = new StatsService(conn);
                        GameStats stats = service.getStats(user, null, dayspan);

                        EmbedCreateSpec embed = EmbedCreateSpec.builder()
                                .title("ðŸ“Š Stats for " + stats.getUsername())
                                .description("Total playtime over the last " + dayspan + " days.")
                                .addField("Total Hours", stats.getTotalHours() + "h", false)
                                .addField("Breakdown", formatBreakdown(stats.getGameBreakdown()), false)
                                .build();

                        List<Button> buttons = List.of(
                                Button.primary("stats_7d", "7d"),
                                Button.secondary("stats_14d", "14d"),
                                Button.secondary("stats_30d", "30d")
                        );

                        return new Object[]{embed, buttons};
                    } catch (Exception e) {
                        throw new RuntimeException("Failed to query stats: " + e.getMessage(), e);
                    }
                }).subscribeOn(Schedulers.boundedElastic()))
                .flatMap(result -> {
                    EmbedCreateSpec embed = (EmbedCreateSpec) result[0];
                    @SuppressWarnings("unchecked")
                    List<Button> buttons = (List<Button>) result[1];

                    return event.editReply();
                })
                .onErrorResume(e -> {
                    e.printStackTrace();
                    return event.editReply();
                }).then();
    }
}